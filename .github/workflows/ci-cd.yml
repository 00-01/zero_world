name: Zero World - CI/CD Pipeline

on:
  push:
    branches: [ master, develop, 'release/**' ]
  pull_request:
    branches: [ master, develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================
  # CODE QUALITY & SECURITY CHECKS
  # ============================================
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for SonarQube

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 pylint mypy bandit safety

    - name: Python Code Formatting (Black)
      run: |
        black --check backend/

    - name: Python Import Sorting (isort)
      run: |
        isort --check-only backend/

    - name: Python Linting (Flake8)
      run: |
        flake8 backend/ --max-line-length=100 --count --statistics

    - name: Python Type Checking (mypy)
      run: |
        mypy backend/app --ignore-missing-imports

    - name: Python Security Check (Bandit)
      run: |
        bandit -r backend/app -f json -o bandit-report.json
      continue-on-error: true

    - name: Dependency Security Check (Safety)
      run: |
        safety check --json
      continue-on-error: true

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.2'
        channel: 'stable'

    - name: Flutter Code Analysis
      run: |
        cd frontend/zero_world
        flutter pub get
        flutter analyze --no-fatal-infos

    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # ============================================
  # UNIT TESTS
  # ============================================
  unit-tests-backend:
    name: Unit Tests - Backend
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    strategy:
      matrix:
        python-version: ['3.11']
        service: 
          - auth-service
          - social-service
          - marketplace-service
          - payment-service
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        cd backend/services/${{ matrix.service }}
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock

    - name: Run unit tests with coverage
      run: |
        cd backend/services/${{ matrix.service }}
        pytest tests/ \
          --cov=app \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term \
          --cov-fail-under=80 \
          -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/services/${{ matrix.service }}/coverage.xml
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage

    - name: Archive coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.service }}-coverage
        path: backend/services/${{ matrix.service }}/htmlcov/

  unit-tests-frontend:
    name: Unit Tests - Frontend
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.2'
        channel: 'stable'

    - name: Get dependencies
      run: |
        cd frontend/zero_world
        flutter pub get

    - name: Run Flutter tests with coverage
      run: |
        cd frontend/zero_world
        flutter test --coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/zero_world/coverage/lcov.info
        flags: flutter
        name: flutter-coverage

  # ============================================
  # INTEGRATION TESTS
  # ============================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [unit-tests-backend, unit-tests-frontend]
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test
      
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -r backend/requirements.txt
        pip install pytest pytest-asyncio httpx

    - name: Run integration tests
      env:
        MONGODB_URL: mongodb://test:test@localhost:27017
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret-key-for-integration-tests
      run: |
        cd backend
        pytest tests/integration/ -v

  # ============================================
  # BUILD DOCKER IMAGES
  # ============================================
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [code-quality, integration-tests]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
    
    strategy:
      matrix:
        service:
          - auth-service
          - social-service
          - marketplace-service
          - payment-service
          - notification-service
          - messaging-service
          - search-service
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend/services/${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  build-frontend:
    name: Build Flutter Web
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [code-quality, unit-tests-frontend]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.2'
        channel: 'stable'

    - name: Build Flutter web
      run: |
        cd frontend/zero_world
        flutter pub get
        flutter build web --release --web-renderer canvaskit

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend/zero_world
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ============================================
  # E2E TESTS
  # ============================================
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build-images, build-frontend]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Start services with Docker Compose
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30  # Wait for services to be ready

    - name: Set up Node.js (for Playwright)
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Playwright
      run: |
        npm install -D @playwright/test
        npx playwright install --with-deps

    - name: Run E2E tests
      run: |
        npx playwright test

    - name: Upload Playwright report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: playwright-report
        path: playwright-report/

    - name: Stop services
      if: always()
      run: docker-compose -f docker-compose.test.yml down

  # ============================================
  # PERFORMANCE TESTS
  # ============================================
  performance-tests:
    name: Performance & Load Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [e2e-tests]
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run load tests
      run: |
        k6 run tests/performance/load-test.js \
          --vus 1000 \
          --duration 5m \
          --out json=load-test-results.json

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: load-test-results.json

  # ============================================
  # SECURITY SCAN
  # ============================================
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build-images, build-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # ============================================
  # DEPLOY TO STAGING
  # ============================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [e2e-tests, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.zn-01.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

    - name: Deploy to staging
      run: |
        kubectl apply -f kubernetes/staging/ --namespace=zero-world-staging
        kubectl rollout status deployment/auth-service -n zero-world-staging
        kubectl rollout status deployment/social-service -n zero-world-staging

    - name: Run smoke tests
      run: |
        curl -f https://staging.zn-01.com/health || exit 1

  # ============================================
  # DEPLOY TO PRODUCTION
  # ============================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [deploy-staging, performance-tests]
    if: github.ref == 'refs/heads/master'
    environment:
      name: production
      url: https://www.zn-01.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Deploy to production (Blue-Green)
      run: |
        # Deploy to green environment
        kubectl apply -f kubernetes/production/ --namespace=zero-world-production-green
        
        # Wait for rollout
        kubectl rollout status deployment/auth-service -n zero-world-production-green
        kubectl rollout status deployment/social-service -n zero-world-production-green
        
        # Run health checks
        kubectl run health-check --rm -i --restart=Never \
          --image=curlimages/curl -- \
          curl -f http://auth-service.zero-world-production-green:8000/health

    - name: Switch traffic to green
      run: |
        kubectl patch service auth-service -n zero-world-production \
          -p '{"spec":{"selector":{"version":"green"}}}'

    - name: Monitor deployment
      run: |
        sleep 60
        kubectl get pods -n zero-world-production-green
        kubectl top pods -n zero-world-production-green

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'Production deployment completed!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # ============================================
  # ROLLBACK (Manual)
  # ============================================
  rollback-production:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: production
    
    steps:
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Rollback to previous version
      run: |
        kubectl rollout undo deployment/auth-service -n zero-world-production
        kubectl rollout undo deployment/social-service -n zero-world-production
        
        # Wait for rollback
        kubectl rollout status deployment/auth-service -n zero-world-production
        kubectl rollout status deployment/social-service -n zero-world-production

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: 'warning'
        text: '⚠️ Production rollback executed!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
