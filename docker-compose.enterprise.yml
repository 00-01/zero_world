version: "3.8"

services:
  # ============================================
  # API GATEWAY (Kong)
  # ============================================
  api-gateway:
    image: kong:3.4
    container_name: zero_world_api_gateway
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - "8000:8000" # Proxy
      - "8001:8001" # Admin API
      - "8443:8443" # Proxy SSL
      - "8444:8444" # Admin API SSL
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - postgres
    networks:
      - zero_world_network
    restart: unless-stopped

  # ============================================
  # AUTH SERVICE
  # ============================================
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: zero_world_auth_service
    environment:
      - MONGODB_URL=${MONGODB_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=15
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=30
      - OAUTH_GOOGLE_CLIENT_ID=${OAUTH_GOOGLE_CLIENT_ID}
      - OAUTH_GOOGLE_CLIENT_SECRET=${OAUTH_GOOGLE_CLIENT_SECRET}
      - OAUTH_FACEBOOK_CLIENT_ID=${OAUTH_FACEBOOK_CLIENT_ID}
      - OAUTH_FACEBOOK_CLIENT_SECRET=${OAUTH_FACEBOOK_CLIENT_SECRET}
    ports:
      - "8100:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - mongodb
      - redis
    networks:
      - zero_world_network
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: "1"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M

  # ============================================
  # SOCIAL SERVICE
  # ============================================
  social-service:
    build:
      context: ./services/social-service
      dockerfile: Dockerfile
    container_name: zero_world_social_service
    environment:
      - MONGODB_URL=${MONGODB_URL}
      - REDIS_URL=${REDIS_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - S3_BUCKET=${S3_BUCKET}
      - S3_REGION=${S3_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    ports:
      - "8200:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    networks:
      - zero_world_network
    restart: unless-stopped
    deploy:
      replicas: 5
      resources:
        limits:
          cpus: "2"
          memory: 2G

  # ============================================
  # MARKETPLACE SERVICE
  # ============================================
  marketplace-service:
    build:
      context: ./services/marketplace-service
      dockerfile: Dockerfile
    container_name: zero_world_marketplace_service
    environment:
      - MONGODB_URL=${MONGODB_URL}
      - REDIS_URL=${REDIS_URL}
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL}
    ports:
      - "8300:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - mongodb
      - redis
      - elasticsearch
    networks:
      - zero_world_network
    restart: unless-stopped
    deploy:
      replicas: 5
      resources:
        limits:
          cpus: "2"
          memory: 2G

  # ============================================
  # PAYMENT SERVICE (PCI-DSS Compliant)
  # ============================================
  payment-service:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile
    container_name: zero_world_payment_service
    environment:
      - MONGODB_URL=${MONGODB_URL}
      - REDIS_URL=${REDIS_URL}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${PAYPAL_CLIENT_SECRET}
    ports:
      - "8400:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - mongodb
      - redis
    networks:
      - zero_world_network
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: "1"
          memory: 1G

  # ============================================
  # NOTIFICATION SERVICE
  # ============================================
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: zero_world_notification_service
    environment:
      - MONGODB_URL=${MONGODB_URL}
      - REDIS_URL=${REDIS_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - FIREBASE_CREDENTIALS=${FIREBASE_CREDENTIALS}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
    ports:
      - "8500:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    networks:
      - zero_world_network
    restart: unless-stopped
    deploy:
      replicas: 3

  # ============================================
  # MESSAGING SERVICE (WebSocket)
  # ============================================
  messaging-service:
    build:
      context: ./services/messaging-service
      dockerfile: Dockerfile
    container_name: zero_world_messaging_service
    environment:
      - MONGODB_URL=${MONGODB_URL}
      - REDIS_URL=${REDIS_URL}
    ports:
      - "8600:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - mongodb
      - redis
    networks:
      - zero_world_network
    restart: unless-stopped
    deploy:
      replicas: 10 # High replica for real-time connections

  # ============================================
  # SEARCH SERVICE (Elasticsearch)
  # ============================================
  search-service:
    build:
      context: ./services/search-service
      dockerfile: Dockerfile
    container_name: zero_world_search_service
    environment:
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL}
      - REDIS_URL=${REDIS_URL}
    ports:
      - "8700:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - elasticsearch
      - redis
    networks:
      - zero_world_network
    restart: unless-stopped
    deploy:
      replicas: 3

  # ============================================
  # DATABASES
  # ============================================

  # MongoDB (Primary Database)
  mongodb:
    image: mongo:7.0
    container_name: zero_world_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: zero_world
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - zero_world_network
    restart: unless-stopped
    command: mongod --replSet rs0 --bind_ip_all

  # PostgreSQL (Kong & Transactional Data)
  postgres:
    image: postgres:16
    container_name: zero_world_postgres
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - zero_world_network
    restart: unless-stopped

  # Redis (Cache & Session Store)
  redis:
    image: redis:7.2-alpine
    container_name: zero_world_redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 2gb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - zero_world_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch (Search Engine)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: zero_world_elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - zero_world_network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -u elastic:${ELASTIC_PASSWORD} -f http://localhost:9200/_cluster/health || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # MESSAGE QUEUE
  # ============================================
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: zero_world_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672" # AMQP
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - zero_world_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # MONITORING & OBSERVABILITY
  # ============================================

  # Prometheus (Metrics)
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: zero_world_prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=30d"
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - zero_world_network
    restart: unless-stopped

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:10.2.0
    container_name: zero_world_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=redis-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    networks:
      - zero_world_network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Jaeger (Distributed Tracing)
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: zero_world_jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686" # UI
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    networks:
      - zero_world_network
    restart: unless-stopped

  # ELK Stack (Logging)
  elasticsearch-logs:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: zero_world_elasticsearch_logs
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    ports:
      - "9201:9200"
    volumes:
      - elasticsearch_logs_data:/usr/share/elasticsearch/data
    networks:
      - zero_world_network
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: zero_world_logstash
    volumes:
      - ./monitoring/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    ports:
      - "5044:5044"
      - "9600:9600"
    networks:
      - zero_world_network
    restart: unless-stopped
    depends_on:
      - elasticsearch-logs

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: zero_world_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch-logs:9200
    ports:
      - "5601:5601"
    networks:
      - zero_world_network
    restart: unless-stopped
    depends_on:
      - elasticsearch-logs

  # ============================================
  # FRONTEND
  # ============================================
  frontend:
    build:
      context: ./frontend/zero_world
      dockerfile: Dockerfile
    container_name: zero_world_frontend
    ports:
      - "8080:80"
    networks:
      - zero_world_network
    restart: unless-stopped

  # ============================================
  # NGINX (Reverse Proxy & Load Balancer)
  # ============================================
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: zero_world_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/www:/var/www/certbot:ro
      - ./certbot/conf:/etc/letsencrypt:ro
    networks:
      - zero_world_network
    restart: unless-stopped
    depends_on:
      - api-gateway
      - frontend

# ============================================
# NETWORKS
# ============================================
networks:
  zero_world_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================
# VOLUMES
# ============================================
volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  elasticsearch_logs_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
